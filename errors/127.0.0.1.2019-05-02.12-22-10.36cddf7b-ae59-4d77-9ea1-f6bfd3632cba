(dp1
S'output'
p2
S'<type \'exceptions.SyntaxError\'> Field: invalid table name: nro_certificado , use rname for "funny" names'
p3
sS'layer'
p4
S'D:\\web2py\\applications\\antecedentesplataforma\\models\\db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# -------------------------------------------------------------------------\n# This scaffolding model makes your app work on Google App Engine too\n# File is released under public domain and you can use without limitations\n# -------------------------------------------------------------------------\n\nif request.global_settings.web2py_version < "2.14.1":\n    raise HTTP(500, "Requires web2py 2.13.3 or newer")\n\n# -------------------------------------------------------------------------\n# if SSL/HTTPS is properly configured and you want all HTTP requests to\n# be redirected to HTTPS, uncomment the line below:\n# -------------------------------------------------------------------------\n# request.requires_https()\n\n# -------------------------------------------------------------------------\n# app configuration made easy. Look inside private/appconfig.ini\n# -------------------------------------------------------------------------\nfrom gluon.contrib.appconfig import AppConfig\n\n# -------------------------------------------------------------------------\n# once in production, remove reload=True to gain full speed\n# -------------------------------------------------------------------------\nmyconf = AppConfig(reload=True)\n\nif not request.env.web2py_runtime_gae:\n    # ---------------------------------------------------------------------\n    # if NOT running on Google App Engine use SQLite or other DB\n    # ---------------------------------------------------------------------\n    db = DAL(myconf.get(\'db.uri\'),\n             pool_size=myconf.get(\'db.pool_size\'),\n             migrate_enabled=myconf.get(\'db.migrate\'),\n             check_reserved=[\'all\'])\nelse:\n    # ---------------------------------------------------------------------\n    # connect to Google BigTable (optional \'google:datastore://namespace\')\n    # ---------------------------------------------------------------------\n    db = DAL(\'google:datastore+ndb\')\n    # ---------------------------------------------------------------------\n    # store sessions and tickets there\n    # ---------------------------------------------------------------------\n    session.connect(request, response, db=db)\n    # ---------------------------------------------------------------------\n    # or store session in Memcache, Redis, etc.\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\n    # ---------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# by default give a view/generic.extension to all actions from localhost\n# none otherwise. a pattern can be \'controller/function.extension\'\n# -------------------------------------------------------------------------\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n# -------------------------------------------------------------------------\n# choose a style for forms\n# -------------------------------------------------------------------------\nresponse.formstyle = myconf.get(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.get(\'forms.separator\') or \'\'\n\n# -------------------------------------------------------------------------\n# (optional) optimize handling of static files\n# -------------------------------------------------------------------------\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n# -------------------------------------------------------------------------\n# (optional) static assets folder versioning\n# -------------------------------------------------------------------------\n# response.static_version = \'0.0.0\'\n\n# -------------------------------------------------------------------------\n# Here is sample code if you need for\n# - email capabilities\n# - authentication (registration, login, logout, ... )\n# - authorization (role based authorization)\n# - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n# - old style crud actions\n# (more options discussed in gluon/tools.py)\n# -------------------------------------------------------------------------\n\nfrom gluon.tools import Auth, Service, PluginManager\n\n#host names must be a list of allowed host names (glob syntax allowed)\nauth = Auth(db, host_names=myconf.get(\'host.names\'))\nservice = Service()\nplugins = PluginManager()\n\n# -------------------------------------------------------------------------\n# create all tables needed by auth if not custom tables\n# -------------------------------------------------------------------------\nauth.settings.extra_fields[\'auth_user\'] = [Field(\'oficina\'),Field(\'dni\'),Field(\'iniciales\')]\nauth.define_tables(username=True, signature=False)\n\n# -------------------------------------------------------------------------\n# configure email\n# -------------------------------------------------------------------------\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.get(\'smtp.server\')\nmail.settings.sender = myconf.get(\'smtp.sender\')\nmail.settings.login = myconf.get(\'smtp.login\')\nmail.settings.tls = myconf.get(\'smtp.tls\') or False\nmail.settings.ssl = myconf.get(\'smtp.ssl\') or False\n\n# -------------------------------------------------------------------------\n# configure auth policy\n# -------------------------------------------------------------------------\n#auth.settings.registration_requires_verification = False\n#auth.settings.registration_requires_approval = False\n#auth.settings.reset_password_requires_verification = True\nauth.settings.actions_disabled.append(\'register\')\nauth.settings.actions_disabled.append(\'retrieve_username\')\nauth.settings.actions_disabled.append(\'request_reset_password\')\n\nauth.settings.remember_me_form=False\nauth.settings.registration_requires_approval = True\nauth.settings.on_failed_authorization = \\\n    URL(\'sin_autorizacion\')\n# -------------------------------------------------------------------------\n# Define your tables below (or better in another model file) for example\n#\n# >>> db.define_table(\'mytable\', Field(\'myfield\', \'string\'))\n#\n# Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n#       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n# There is an implicit \'id integer autoincrement\' field\n# Consult manual for more options, validators, etc.\n#\n# More API examples for controllers:\n#\n# >>> db.mytable.insert(myfield=\'value\')\n# >>> rows = db(db.mytable.myfield == \'value\').select(db.mytable.ALL)\n# >>> for row in rows: print row.id, row.myfield\n# -------------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# after defining tables, uncomment below to enable auditing\n# -------------------------------------------------------------------------\n# auth.enable_record_versioning(db)\n#db = DAL(mysql://root:root@localhost/antecedentes-interno)\n#http://localhost/antecedentes-interno/\n\ndb.define_table(\'paises\',\n    \n    \n    Field(\'pais\'),\n\n    format=\'%(pais)s\'\n    )\ndb.define_table(\'prontuario\',\n    \n    \n    Field(\'Tprontuario\'),\n    format=\'%(Tprontuario)s\'\n    \n    )\n\ndb.define_table(\'padron\',\n       \n    Field(\'Apellido\',requires=IS_UPPER()),\n    Field(\'Nombre\',requires=IS_UPPER()),\n    Field(\'Clase\',requires=IS_UPPER()),\n    Field(\'DocumentoNro\',\'integer\',requires=IS_UPPER()),\n    Field(\'Pasaporte\',requires=IS_UPPER()),\n    Field(\'IdPais\',db.paises),\n    Field(\'Genero\',requires=IS_IN_SET(["M","F"])),\n    Field(\'EstadoCivil\',label=\'Estado Civil\',requires=IS_IN_SET(["S","C","D","V"])),         \n    Field(\'Profesion\',requires=IS_UPPER()),\n    Field(\'Direccion\',requires=IS_UPPER()),\n    Field(\'IdProntuarioTipo\',db.prontuario),\n    Field(\'ProntuarioNro\',\'integer\'),\n    Field(\'Observaciones\',requires=IS_UPPER()))\n\ndb.define_table(\'solicitud\',    \n    Field(\'dni\',\'integer\'),    \n    Field(\'apellido\',requires=IS_UPPER()),  \n    Field(\'nombre\',requires=IS_UPPER()),       \n    Field(\'genero\'),\n    Field(\'tipo_prontuario\'),   \n    Field(\'prontuario\'),\n    Field(\'nro_certificado\'),\n    Field(\'estado_solicitud\'),\n    Field(\'fecha_solicitada\',\'datetime\',requires=[IS_NOT_EMPTY(),IS_DATETIME()]),\n    Field(\'hora\',\'datetime\',requires=[IS_NOT_EMPTY(),IS_DATETIME()]),   \n    Field(\'solicitado_por\',requires=IS_UPPER()),#ante las autoridades q lo requieran\n    Field(\'capitalinterior\',requires=IS_IN_SET(["CAPITAL","INTERIOR",""]) ),\n    Field(\'intervino\',requires=IS_UPPER()),#usuario q carga\n    Field(\'usuario\',requires=IS_UPPER()),\n    Field(\'ip_solicitante\'),\n    Field(\'ip_confeccion\'),\n    Field(\'t_antecedentes\',requires=IS_IN_SET(["NO","SI"])),\n    Field(\'antecedentes\',\'text\',requires=IS_UPPER()),\n    )\ndb.define_table(\'historial\',      \n    Field(\'dni\',\'integer\'),\n    Field(\'pasaporte\'),    \n    Field(\'nombre\',requires=IS_UPPER()),    \n    Field(\'apellido\',requires=IS_UPPER()),\n    Field(\'nro_certificado\'),\n    Field(\'capitalinterior\'),\n    Field(\'intervino\',requires=IS_UPPER()),#usuario q carga\n    Field(\'fecha\',\'datetime\'),\n    Field(\'hora\'),\n    Field(\'solicitado_por\',requires=IS_UPPER()),##ante las autoridades q lo requieran\n    Field(\'t_antecedentes\',requires=IS_IN_SET(["SI","NO",""])),\n    Field(\'antecedentes\',\'text\',requires=IS_UPPER()),\n\n    )\ndb.define_table(\'nro_certificado \', \n    Field(\'nro_certificado\',\'integer\'),\n    Field(\'anio\',\'integer\'),\n    )\n\n\n\n#------------------------------------------------\n#---------------Validadores------------------------\ndb.padron.IdPais.requires=IS_IN_DB(db,\'paises\',\'%(pais)s\')\ndb.padron.IdProntuarioTipo.requires=IS_IN_DB(db,\'prontuario\',\'%(Tprontuario)s\')\ndb.auth_user.oficina.requires=IS_IN_SET([\'Turnos\',\'Confeccion\',\'Super\'])\n\n    '
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "D:\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "D:\\web2py\\applications\\antecedentesplataforma\\models\\db.py", line 212, in <module>\n    Field(\'anio\',\'integer\'),\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 851, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 226, in __init__\n    \'use rname for "funny" names\' % tablename)\nSyntaxError: Field: invalid table name: nro_certificado , use rname for "funny" names\n'
p11
s.