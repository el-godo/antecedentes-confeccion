(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '09_56_55'"
p3
sS'layer'
p4
S'D:\\web2py\\applications\\antecedentesplataforma\\controllers/entrada.py'
p5
sS'code'
p6
S'\n    \ndef entrada():\n    return dict()\n\n\n\t\n    \ndef ingreso():\n\t#poner un valor por defecto a un campo del formulario    \n\tform=SQLFORM.factory(    \n    Field(\'valor\',\'string\',label="Ingrese Un Dni/Pasaporte",requires=IS_NOT_EMPTY(error_message=\'El campo puede estar vac\xc3\xado\'))\n    \n    )         \n    \tif form.accepts(request,session):\n    \t\tresponse.flash = \'formulario aceptado\'\n    \t\tredirect(URL(c=\'entrada\',f=\'comprobacion\',args=[form.vars.valor]))\n    \telif form.errors:\n        \tresponse.flash = \'el formulario tiene errores\'\n    \telse:\n        \tresponse.flash = \'por favor complete el formulario\'  \n\treturn dict(form=form)\ndef comprobacion():\n    dnpa=request.args[0]\n    setpa=db((db.padron.dni==dnpa)|(db.padron.pasaporte==dnpa)).select()\n    tiene=len(setpa)\n    if tiene==0:\n        redirect(URL(c=\'confeccion\',f=\'sin_dni\',args=[dnpa]))#si no esta en la tabla padron redirecciona\n    else:#si esta en la tabla padron mustro los datos\n        for x in setpa:\n            apellido=x.apellido\n            nombre=x.nombre\n            tipo=x.Tprontuario\n            nprontuario=x.ProntuarioNro     \n       \n        \n\n\n    return dict(setpa=setpa,dnpa=dnpa,apellido=apellido,nombre=nombre,tipo=tipo,nprontuario=nprontuario)\n\ndef convencional():\n    dnpa=request.args[0]#recojo los datos que vengo trayendo de dni\n    apellido=request.args[1]\n    nombre=request.args[2]\n    tipo=request.args[3]\n    nprontuario=request.args[4]\n    setsoli=db(db.solicitud.dni==dnpa).select()#pregunto si se encuentra el dni en la tabla solicitud\n    if len(setsoli)!=0:\n        for x in setsoli:\n            estado=x.Estado_solicitud\n            fecha=x.Fecha_solicitada\n            hora=x.Hora\n            intervino=x.intervino\n            ide.x.id\n        redirect(URL(c=\'entrada\',f=\'tsolicitud\',args=[dnpa,apellido,nombre,tipo,nprontuario,estado,fecha,hora,intervino,ide]))\n        #redirecciono para ver si que tiempo de solicitud tiene\n    else:\n        #redirecciono si no  tiene registro en la tabla solicitud\n        redirect(URL(c=\'confeccion\',f=\'sin_dni\',args=[atrapa,quees]))#si no esta en la tabla padron redirecciona\n    return dict(setsoli=setsoli)\ndef tsolicitud():\n    from datetime import *\n    from time import time\n    #capturo paramertros\n    dnpa=request.args[0]#recojo los datos que vengo trayendo de dni\n    apellido=request.args[1]\n    nombre=request.args[2]\n    tipo=request.args[3]\n    nprontuario=request.args[4]\n    estado=request.args[5]\n    fecha=request.args[6]\n    hora=request.args[7]\n    intervino=request.args[8]\n    ide=request.args[9]\n    setsoli=db(db.solicitud.id==ide).select()#ide de la persona q ya existe en la tabla\n    if estado =="Completado":\n        hoyfecha= "feca=datetime.today()"\n\n\n\n\n\n\n\n\n\n\n\n\n    return dict(dnapa=dnapa,apellido=apellido,)\ndef web():\n    return dict()\n\n\ndef consilicitud():\n    #haciendo de nuevo la funcion (habra) para ver si se puede resumir\n    #variables\n    feca=""\n    \n    \n    \n    \n    from datetime import *\n    from time import time\n    atrapa=request.args[0]#atrapo el valor ingresado\n    quees=request.args[1]#atrapo el tipo si dni o pasaporte #\n    feca=datetime.today()\n    formato="%d/%m/%Y"\n    hoyfecha= feca.strftime("%d/%m/%Y")#capturo la hora de hoy\n    fhoyfecha=datetime.strptime(hoyfecha,formato)#convierto el string a fecha para comparar\n    #pregunto si es un dni o un pasaporte\n    if quees=="DNI":\n        query1=db(db.padron.dni==atrapa).select()#pregunto si el dni esta en la base de datos del padron\n        if len(query1)==0:\n            redirect(URL(c=\'confeccion\',f=\'sin_dni\',args=[atrapa,quees]))#si no esta en la tabla padron redirecciona\n\n        \n\n        elif len(query1)>0:\n            query2=db(db.solicitud.dni==atrapa).select()\n            if len(query2)==0:\n                redirect(URL(c=\'confeccion\',f=\'procesar\',args=[atrapa,quees]))\n            elif len(query2)>0:\n                for x in query2:\n                    estado=x.Estado_solicitud\n                    dni=x.dni\n                    nombre=x.nombre\n                    apellido=x.apellido                \n                    ultimafecha=x.Fecha_solicitada#capturo el ultima dia de solicitud                            \n                    fultimafecha=datetime.strptime(ultimafecha,formato)\n                    ultimahora=x.Hora#capturola ultima hora de solicitud                 \n                    \n                if fultimafecha>fhoyfecha  :#pregunto si hay error en las fechas\n                    error="ERROR"\n                    redirect(URL(c=\'errores\',f=\'error_fecha\',args=[ultimafecha,hoyfecha]))\n                elif fultimafecha<fhoyfecha  :#pregunto si hay error en las fechas\n                    error="NINGUN ERROR"#\n                    if ((estado=="Anulado")|(estado=="")):\n                        redirect(URL(c=\'confeccion\',f=\'procesar\',args=[atrapa,quees]))\n                    if (estado=="Completado"):\n                        diferencia=fhoyfecha-fulti\n                        \n                       \n\n\n                        \n\n\n                        \n\n                        \n                               \n                        #else:#tiene mas de\n                    #if ((estado=="Anulado")              \n\n                \n\n\n       \n    elif quees=="PASAPORTE": #si dice  q no es un pasaporte\n        query1=db(db.padron.pasaporte==atrapa).select()#pregunto si el pasaporte esta en la base de datos del padron\n        #if len(query1)==0:\n            #redirect(URL(c=\'confeccion\',f=\'sin_dni\',args=[atrapa,quees]))#si no esta en la tabla padron redirecciona\n        #else:\n            #query2=db(db.solicitud.pasaporte==atrapa).select()\n            #if len(query2)==0:\n                #redirect(URL(c=\'confeccion\',f=\'procesar\',args=[atrapa,quees]))\n            #else:\n                #pirnt("sigo")\n\n\n    return dict(ultimafecha=ultimafecha,ultimahora=ultimahora,nombre=nombre,apellido=apellido,dni=dni,estado=estado,atrapa=atrapa,quees=quees) \n          \n\n\nresponse._vars=response._caller(tsolicitud)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "D:\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "D:\\web2py\\applications\\antecedentesplataforma\\controllers/entrada.py", line 176, in <module>\n  File "D:\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\web2py\\applications\\antecedentesplataforma\\controllers/entrada.py", line 75, in tsolicitud\n    setsoli=db(db.solicitud.id==ide).select()#ide de la persona q ya existe en la tabla\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'09_56_55\'\n'
p11
s.