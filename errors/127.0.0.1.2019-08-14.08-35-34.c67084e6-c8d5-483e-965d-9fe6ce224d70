(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'XDB234535'"
p3
sS'layer'
p4
S'D:\\web2py\\applications\\antecedentesplataforma\\controllers/entrada.py'
p5
sS'code'
p6
S'\ndef entrada():\n    return dict()    \ndef ingreso():\n\t#poner un valor por defecto a un campo del formulario    \n\tform=SQLFORM.factory(    \n    Field(\'valor\',label="Ingrese Un Dni/Pasaporte",requires=IS_NOT_EMPTY(error_message=\'El campo puede estar vac\xc3\xado\'))\n    \n    )         \n    \tif form.accepts(request,session):\n    \t\tresponse.flash = \'formulario aceptado\'\n    \t\tredirect(URL(c=\'entrada\',f=\'comprobacion\',args=[form.vars.valor]))\n    \telif form.errors:\n        \tresponse.flash = \'el formulario tiene errores\'\n    \telse:\n        \tresponse.flash = \'por favor complete el formulario\'  \n\treturn dict(form=form)\ndef comprobacion():\n    dnpa=request.args[0]\n    clave={\'1\':"A.G.",\'2\':"C.I.",\'3\':"D.C.P",\'4\':"D.E",\'5\':"R.C",\'6\':"S.P.",\'0\':None}\n    setpa=db((db.padron.DocumentoNro==dnpa)|(db.padron.Pasaporte==dnpa)).select()\n    tiene=len(setpa)\n    if tiene==0:\n        redirect(URL(c=\'padron\',f=\'sin\',args=[dnpa]))#si no esta en la tabla padron redirecciona\n    else:#si esta en la tabla padron mustro los datos\n        for x in setpa:\n            apellido=x.Apellido\n            nombre=x.Nombre\n            tipo=x.IdProntuarioTipo\n            tipo=str(tipo)#convierto a string\n            tipo=clave[tipo]#reemplazo en el diccionario para sacar el tipo a mostrar en el formulario\n            tipo=str(tipo)#paso a cadena el tipo de prontuario para mostrar en el formulario    \n            nprontuario=x.ProntuarioNro \n            genero=x.Genero \n       \n        \n\n\n    return dict(setpa=setpa,dnpa=dnpa,apellido=apellido,nombre=nombre,tipo=tipo,nprontuario=nprontuario,genero=genero)\n\ndef convencional():\n    #dnpa,apellido,nombre,tipo,nprontuario,genero\n    dnpa=request.args[0]#recojo los datos que vengo trayendo de dni\n    apellido=request.args[1]\n    nombre=request.args[2]\n    tipo=request.args[3]\n    nprontuario=request.args[4]\n    genero=request.args[5]\n    setsoli=db(db.solicitud.dni==dnpa).select()#pregunto si se encuentra el dni en la tabla solicitud\n    if len(setsoli)>0:#si tiene almenos uno\n        for x in setsoli:#recorro el set para sacar datos\n            estado=x.estado_solicitud                                       \n            intervino=x.intervino\n            ide=x.id\n        redirect(URL(c=\'entrada\',f=\'tsolicitud\',args=[dnpa,apellido,nombre,tipo,nprontuario,estado,intervino,ide,genero]))\n        #redirecciono para ver si que tiempo de solicitud tiene\n    else:\n        #redirecciono si no  tiene registro en la tabla solicitud\n        redirect(URL(c=\'entrada\',f=\'sin_solicitud\',args=[dnpa,apellido,nombre,genero,tipo,nprontuario]))#si no esta en la tabla padron redirecciona\n    return dict(setsoli=setsoli,ide=ide)\n\ndef tsolicitud():\n    from datetime import *\n    from time import time\n    from datetime import datetime\n    #capturo paramertros  \n    dnpa=request.args[0]#recojo los datos que vengo trayendo de dni\n    apellido=request.args[1]    \n    nombre=request.args[2]\n    tipo=request.args[3]\n    nprontuario=request.args[4]\n    estado=request.args[5]     \n    intervino=request.args[6]\n    ide=request.args[7]\n    genero=request.args[8]    \n         #tomo la fecha de hoy    \n    hoyfecha= datetime.today()#capturo la hora de hoy    \n    setsoli=db(db.solicitud.id==ide).select().first()#consulto si esta en la tabla solicitud\n    turno_fecha= setsoli.fecha_solicitada\n    turno_hora=setsoli.hora  \n    if (turno_fecha==None):#si la fecha esta vacia redirecciono y genero una nueva solicitud        \n        redirect(URL(c=\'entrada\',f=\'nueva_solicitud\',args=[dnpa,apellido,nombre,tipo,nprontuario,estado,intervino,ide,genero]))    \n    elif (turno_fecha!=None):                 \n        if hoyfecha<turno_fecha: #comparo las fechas para ver si hay error \n            redirect(URL(c=\'errores\',f=\'error_fecha\',args=[hoyfecha,turno_fecha]))\n        if ((estado=="Anulado")|(estado=="Completado")):#pregunto si tiene una solicitud para mostrarla al usuario\n            redirect(URL(c=\'entrada\',f=\'nueva_solicitud\',args=[dnpa,apellido,nombre,tipo,nprontuario,estado,intervino,ide,genero]))                       \n        elif((estado=="Archivo")|(estado=="Confeccion")|(estado=="Pendiente")):\n            print("muestro")     \n                            \n    return dict(dnpa=dnpa,apellido=apellido,nombre=nombre,tipo=tipo,nprontuario=nprontuario,estado=estado,intervino=intervino,hoyfecha=hoyfecha,\n        setsoli=setsoli,ide=ide,genero=genero,turno_fecha=turno_fecha,\n        turno_hora=turno_hora)\n\ndef sin_solicitud():    \n    #recojo los valores\n\n    dnpa=request.args(0)\n    apellido=request.args(1)\n    nombre=request.args(2)\n    tipo=request.args(4)\n    nprontuario=request.args(5)\n    genero=request.args(3)  \n    \n    \n    \n    #lleno valores en blanco\n    estado=""\n    intervino=""\n    \n    db.solicitud.insert(dni=dnpa,apellido=apellido,nombre=nombre,genero=genero,tipo_prontuario=tipo,prontuario=nprontuario,estado_solicitud=estado,intervino=intervino)\n    #consulto para sacar el id y quien intervino\n    comprobar=db(db.solicitud.dni==dnpa).select().first()\n    #busco y saco el id para mandar parametro args\n    ide=comprobar.id\n    intervino=comprobar.intervino\n\n\n\n\n    redirect(URL(c=\'entrada\',f=\'tsolicitud\',args=[dnpa,apellido,nombre,tipo,nprontuario,estado,intervino,ide,genero]))\n  \n    return dict()  \n\ndef nueva_solicitud():  \n    dnpa=request.args[0]#recojo los datos que vengo trayendo de dni\n    apellido=request.args[1]\n    nombre=request.args[2]\n    tipo=request.args[3]\n    nprontuario=request.args[4]\n    estado=request.args[5]     \n    intervino=request.args[6]\n    ide=request.args[7]\n    genero=request.args[8]\n    return dict(dnpa=dnpa,apellido=apellido,nombre=nombre,tipo=tipo,nprontuario=nprontuario,estado=estado,\n        ide=ide,genero=genero)\n\n\ndef form_solicitud():\n    from datetime import *\n    from time import time\n    from datetime import datetime\n    dnpa=request.args[0]#recojo los datos que vengo trayendo de dni\n    apellido=request.args[1]\n    nombre=request.args[2]\n    tipo=request.args[3]\n    nprontuario=request.args[4]\n    estado=request.args[5]       \n    ide=request.args[6]\n    genero=request.args[7]\n    hoyfecha=datetime.today()#tomo la fecha de hoy\n    hora=datetime.today()         \n    quien=auth.user.id\n    user=db(db.auth_user.id==quien).select().first()#pregunto quien esta logueado\n    usuario_nombre=user.first_name\n    usuario_apellido=user.last_name\n    usuario=usuario_nombre+" "+usuario_apellido#concateno cadena para generar el nombre del usuario\n    soli=db(db.solicitud.id==ide).select().first()\n    #genero una nueva entrada en la tabla solicitud\n    soli.update_record(dni=dnpa,apellido=apellido,nombre=nombre,tipo_prontuario=tipo,prontuario=nprontuario,\n        estado_solicitud="Pendiente",usuario=usuario,fecha_solicitada=hoyfecha,hora=hora,genero=genero)    \n    \n    return dict(dnpa=dnpa,apellido=apellido,nombre=nombre,tipo=tipo,nprontuario=nprontuario,estado=estado,ide=ide,\n        usuario_nombre=usuario_nombre,usuario=usuario,hora=hora,hoyfecha=hoyfecha)\n\n        \ndef form_ver_estado():\n    #poner un valor por defecto a un campo del formulario    \n    form=SQLFORM.factory(    \n    Field(\'valor\',\'string\',label="Ingrese Un Dni/Pasaporte",requires=IS_NOT_EMPTY(error_message=\'El campo puede estar vac\xc3\xado\'))\n    \n    )         \n    if form.accepts(request,session):\n            response.flash = \'formulario aceptado\'\n            redirect(URL(c=\'entrada\',f=\'ver_estado\',args=[form.vars.valor]))\n    elif form.errors:\n            response.flash = \'el formulario tiene errores\'\n    else:\n            response.flash = \'por favor complete el formulario\'  \n    return dict(form=form)\n\ndef sin_resultados():\n    \n    return dict()\ndef ver_estado():\n    dnpa=request.args[0]#recojo los datos que vengo trayendo de dni/pasaporte\n    setsoli=db(db.solicitud.dni==dnpa).select() #realizo un set para ver si esta en la tabla\n    tiene=len(setsoli) #pregunto si si hay resultados\n    \n\n    if tiene>0:\n        #creo un diccionario de la tabla tipo\n        dicc={\'1\':"A.G.",\'2\':"C.I.",\'3\':"D.C.P",\'4\':"D.E",\'5\':"R.C",\'6\':"S.P.",\'0\':None}\n        for x in setsoli:\n             \n            apellido=x.apellido\n            nombre=x.nombre\n            te=x.tipo_prontuario          #saco el tipo de prontuario  \n            nprontuario=x.prontuario      #saco el numero de prontuario\n            estado=x.estado_solicitud       #saco estadi\n            fecha=x.fecha_solicitada        #saco fecha\n            tipo=dicc[te]                   #reemplazo el id por el elemento en el diccionario\n            ide=x.id                        #saco id\n           \n        if((estado=="Pendiente")|(estado=="Confeccion")):#pregunto por el estado y muestro solo si no esta anulado completado o nulo\n            print"mostrar"\n        elif ((estado=="Completado")|(estado=="Anulado")|(estado=="")):                \n            redirect(URL(c=\'entrada\',f=\'sin_resultados\'))                             \n    else:\n        redirect(URL(c=\'entrada\',f=\'sin_resultados\'))          \n                \n\n\n    return dict(dnpa=dnpa,apellido=apellido,nombre=nombre,tipo=tipo,nprontuario=nprontuario,estado=estado,ide=ide,te=te,\n        fecha=fecha)\n\ndef anular():\n    ide=request.args[0]#saco id\n    dnpa=request.args[1] #saco dni/pasaporte\n    apellido=request.args[2]\n    nombre=request.args[3]\n    tipo=request.args[4]\n    nprontuario=request.args[5]\n    estado=request.args[6]\n    \n    setsoli=db(db.solicitud.id==ide).select() #armo un set\n    for x in setsoli:#recorro el set\n\n        x.update_record(estado_solicitud=\'Anulado\') #y cambio el estado a anulado\n    return dict(dnpa=dnpa,apellido=apellido,nombre=nombre,tipo=tipo,nprontuario=nprontuario\n        ,estado=estado)\n    \n\n\ndef web():\n\n    return dict()\n\n\n\n          \n\n\nresponse._vars=response._caller(comprobacion)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "D:\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "D:\\web2py\\applications\\antecedentesplataforma\\controllers/entrada.py", line 244, in <module>\n  File "D:\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\web2py\\applications\\antecedentesplataforma\\controllers/entrada.py", line 21, in comprobacion\n    setpa=db((db.padron.DocumentoNro==dnpa)|(db.padron.Pasaporte==dnpa)).select()\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 770, in OR\n    return \'(%s OR %s)\' % (self.expand(first), self.expand(second))\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "D:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'XDB234535\'\n'
p11
s.